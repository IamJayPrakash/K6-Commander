
'use server';

/**
 * @fileOverview An AI-powered SEO analyzer flow.
 *
 * - analyzeSeo - A function that performs a deep SEO analysis of a given URL.
 * - SeoAnalyzerInput - The input type for the analyzeSeo function.
 * - SeoAnalyzerOutput - The return type for the analyzeSeo function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const SeoAnalyzerInputSchema = z.object({
  url: z.string().url().describe('The URL of the page to analyze.'),
});
export type SeoAnalyzerInput = z.infer<typeof SeoAnalyzerInputSchema>;

const SeoAnalysisItemSchema = z.object({
    name: z.string().describe("The name of the SEO element being analyzed (e.g., 'Title Tag', 'Meta Description', 'Canonical URL')."),
    value: z.string().nullable().describe("The current value of the SEO element as found on the page. Null if not found."),
    status: z.enum(['pass', 'fail', 'warning']).describe("The status of the check: 'pass' if optimal, 'fail' if missing or critically flawed, 'warning' if present but could be improved."),
    recommendation: z.string().nullable().describe("A concise, actionable recommendation for improvement, generated by the AI. Null if status is 'pass'."),
});

const SeoAnalyzerOutputSchema = z.object({
    analysis: z.array(SeoAnalysisItemSchema).describe("An array of SEO analysis results for various on-page elements."),
    rawHtml: z.string().describe("The raw HTML content of the page that was analyzed."),
});
export type SeoAnalyzerOutput = z.infer<typeof SeoAnalyzerOutputSchema>;


// Exported wrapper function to be called from the API route.
export async function analyzeSeo(input: SeoAnalyzerInput): Promise<SeoAnalyzerOutput> {
  // First, fetch the HTML content of the URL.
  const response = await fetch(input.url, {
    headers: { 'User-Agent': 'K6-Commander-SEO-Checker/1.0' },
  });
  if (!response.ok) {
    throw new Error(`Failed to fetch URL: ${response.status} ${response.statusText}`);
  }
  const rawHtml = await response.text();
  
  // Pass the HTML to the Genkit flow.
  return seoAnalyzerFlow({ url: input.url, htmlContent: rawHtml });
}

const prompt = ai.definePrompt({
  name: 'seoAnalyzerPrompt',
  input: { schema: z.object({
    url: z.string(),
    htmlContent: z.string(),
  })},
  output: { schema: z.object({
    analysis: z.array(SeoAnalysisItemSchema)
  })},
  prompt: `
    You are an expert Technical SEO Analyst. Analyze the provided HTML content for the URL: {{{url}}}.
    Perform a deep analysis of the following on-page SEO elements:
    1.  **Title Tag**: Check for presence, length (ideal: 50-60 chars).
    2.  **Meta Description**: Check for presence, length (ideal: 120-150 chars).
    3.  **H1 Heading**: Check for one, and only one, H1 tag.
    4.  **Canonical URL**: Check if it exists and matches the page URL.
    5.  **Open Graph Title (og:title)**: Check for presence and value.
    6.  **Open Graph Description (og:description)**: Check for presence and value.
    7.  **Open Graph Image (og:image)**: Check for presence.
    8.  **Viewport Meta Tag**: Check for the presence of '<meta name="viewport" ...>'.

    For each element, provide its current value from the HTML.
    - Set status to 'pass' if it's optimal.
    - Set status to 'fail' if it's missing or has a critical error (e.g., no title, multiple H1s).
    - Set status to 'warning' if it's present but could be improved (e.g., title too long/short, canonical mismatch).

    For any 'fail' or 'warning' status, provide a concise, actionable AI recommendation for how to fix it. For 'pass', the recommendation should be null.
    Return your findings as a structured JSON object.
    
    HTML Content to analyze:
    \`\`\`html
    {{{htmlContent}}}
    \`\`\`
  `,
});

const seoAnalyzerFlow = ai.defineFlow(
  {
    name: 'seoAnalyzerFlow',
    inputSchema: z.object({
        url: z.string(),
        htmlContent: z.string(),
    }),
    outputSchema: SeoAnalyzerOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return {
        analysis: output?.analysis || [],
        rawHtml: input.htmlContent,
    }
  }
);
